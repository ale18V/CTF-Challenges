#! /bin/env python3
from Crypto.Util.number import long_to_bytes, bytes_to_long, getStrongPrime
from pwn import process, remote
from myTubes import MyTube
from sys import argv
#proc = process("python3 modular2.py", shell=True)
HOST = argv[1] if len(argv) > 1 else "localhost"
PORT = argv[2] if len(argv) > 2 else 10400

proc = remote(HOST, PORT)
t = MyTube(proc)
e = 2**16 + 1
def choose(choice: int):
    t.rec("Choice: ")
    t.sendInt(choice)

p_mod_q = int(t.rec("\n\n", bounds=('= ', '\n')))
print(p_mod_q)

# p = q + r
# p % q = p_mod_q => 
# p - q = p_mod_q => 
# r = p_mod_q 
r = p_mod_q
choose(1)
t.rec("> ")
t.sendInt(0)
p_plus_q_mod_p_minus_q = t.recInt()

# p + q mod p - q can be rewritten as
# 2q + r mod r =>
# 2q mod r =>
# p+q mod p-q = 2q mod r

choose(2)
encflag = t.recInt()

for k in range(2**10):
    # 2q = (p + q mod p-q) + kr 
    two_q = p_plus_q_mod_p_minus_q + k*r
    if two_q % 2 != 0:
        break
    q = two_q // 2
    p = q+r
    phi = (p-1)*(q-1)
    d = pow(e, -1, phi)
    n = p * q
    try:
        flag = long_to_bytes(pow(p_plus_q_mod_p_minus_q^encflag, d, n))
        if flag.startswith(b'flag'):
            print(flag.decode())
            print(k)
            break
    except:
        continue
